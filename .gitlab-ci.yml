# Store packages locally to allow caching.
variables:
  JULIA_DEPOT_PATH: ${CI_PROJECT_DIR}/.julia
  JULIA_NUM_THREADS: 2

# Cache packages per job (i.e. Julia version) and project specification.
# Do not cache Manifest.toml so that Julia still uses the most recent packages.
cache:
  key:
    prefix: ${CI_JOB_NAME}
    files:
      - Project.toml
  paths:
    - .julia/packages
    - .julia/compiled

test:
  interruptible: true
  image: julia:${JULIA_VERSION}
  script:
    - julia -e 'using InteractiveUtils; versioninfo()'
    - julia --project -e 'using Pkg; Pkg.build(); Pkg.test(coverage=true)'
  coverage: /Test coverage (\d+\.\d+%)/
  after_script:
    - |
      julia -e '
        using Pkg
        Pkg.add("Coverage")
        using Coverage, Printf
        c, t = get_summary(process_folder())
        @printf "Test coverage %.2f%%\n" 100c/t'
  parallel:
    matrix:
      - JULIA_VERSION:
          - '1.6'
          - '1.7'

# Test that the benchmark script isn't broken.
benchmark:
  interruptible: true
  image: julia:1.6
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_BRANCH =~ /^bench/'
  script:
    - cd bench
    - julia --project -e 'using Pkg; Pkg.instantiate()'
    - echo 'run, t_load, t_solve' > startup.csv
    - julia --project startup-double.jl >> startup.csv
    - julia --project -e "using Test, DelimitedFiles; m = readdlm(\"startup.csv\", ','); @test size(m) == (3,3)"
  artifacts:
    paths:
      - bench/startup.csv
    expire_in: 7 days
